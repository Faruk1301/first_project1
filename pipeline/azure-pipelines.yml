trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: terraform_credential  # Includes client_id, client_secret, etc.

stages:

# Stage 1: Terraform Init & Apply
- stage: Terraform
  displayName: 'Terraform Infrastructure Setup'
  jobs:
    - job: Terraform
      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.x'

        - task: TerraformInstaller@1
          inputs:
            terraformVersion: '1.5.7'

        - task: TerraformTaskV4@4
          displayName: 'Terraform Init'
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'terraform-sc'
            backendAzureRmResourceGroupName: 'terraform-backend-rg'
            backendAzureRmStorageAccountName: 'tfstatefaruk1234567'
            backendAzureRmContainerName: 'tfstate'
            backendAzureRmKey: 'dev.terraform.tfstate'
            workingDirectory: 'infra'
          env:
            ARM_CLIENT_ID: $(client_id)
            ARM_CLIENT_SECRET: $(client_secret)
            ARM_SUBSCRIPTION_ID: $(subscription_id)
            ARM_TENANT_ID: $(tenant_id)

        - task: TerraformTaskV4@4
          displayName: 'Terraform Plan'
          inputs:
            provider: 'azurerm'
            command: 'plan'
            environmentServiceNameAzureRM: 'terraform-sc'
            workingDirectory: 'infra'
          env:
            ARM_CLIENT_ID: $(client_id)
            ARM_CLIENT_SECRET: $(client_secret)
            ARM_SUBSCRIPTION_ID: $(subscription_id)
            ARM_TENANT_ID: $(tenant_id)

        - task: TerraformTaskV4@4
          displayName: 'Terraform Apply'
          inputs:
            provider: 'azurerm'
            command: 'apply'
            environmentServiceNameAzureRM: 'terraform-sc'
            workingDirectory: 'infra'
            args: '-auto-approve'
          env:
            ARM_CLIENT_ID: $(client_id)
            ARM_CLIENT_SECRET: $(client_secret)
            ARM_SUBSCRIPTION_ID: $(subscription_id)
            ARM_TENANT_ID: $(tenant_id)

# Stage 2: Build and Deploy Flask App
- stage: Deploy
  displayName: 'Build and Deploy Flask App'
  dependsOn: Terraform
  condition: succeeded()
  jobs:
    - job: DeployApp
      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.x'

        - script: |
            pip install -r requirements.txt
            zip -r app.zip .
          workingDirectory: app
          displayName: 'Prepare Flask App for Deployment'

        - task: AzureWebApp@1
          displayName: 'Deploy to Dev Web App'
          inputs:
            azureSubscription: 'terraform-sc'
            appType: 'webAppLinux'
            appName: 'example-dev-webapp'
            package: '$(System.DefaultWorkingDirectory)/app/app.zip'

        - task: AzureWebApp@1
          displayName: 'Deploy to Staging Web App'
          inputs:
            azureSubscription: 'terraform-sc'
            appType: 'webAppLinux'
            appName: 'example-staging-webapp'
            package: '$(System.DefaultWorkingDirectory)/app/app.zip'


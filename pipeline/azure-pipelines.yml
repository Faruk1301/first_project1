trigger:
  paths:
    include:
      - app/*
      - infra/*
      - pipeline/azure-pipelines.yml

variables:
  - group: terraform_credential
  - name: pythonVersion
    value: '3.10'
  - name: tfWorkingDir
    value: 'infra'
  - name: terraformVersion
    value: '1.5.7'

  - name: environment_dev
    value: 'dev'
  - name: environment_staging
    value: 'staging'
  - name: app_service_name_dev
    value: 'demo-app-faruk-dev-001'
  - name: app_service_name_staging
    value: 'webapp-faruk-staging-001'
  - name: resource_group_name_dev
    value: 'my-resource-group-dev'
  - name: resource_group_name_staging
    value: 'my-resource-group-staging'
  - name: app_service_plan_name
    value: 'my-app-service-plan'

pool:
  vmImage: 'ubuntu-24.04'

stages:
  - stage: Build
    displayName: 'Build Stage'
    jobs:
      - job: BuildJob
        steps:
          - checkout: self

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
              addToPath: true

          - script: |
              cd app
              python -m venv venv
              source venv/bin/activate
              pip install --upgrade pip
              pip install -r requirements.txt
            displayName: 'Install Python Dependencies'

          - task: ArchiveFiles@2
            displayName: 'Package Application'
            inputs:
              rootFolderOrFile: 'app'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'
              replaceExistingArchive: true
              excludeFiles: |
                **/infra/**
                **/__pycache__/**

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Build Artifact'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/app.zip'
              artifact: 'drop'

  - stage: Dev
    displayName: 'Dev Environment Deployment'
    dependsOn: Build
    jobs:
      - job: DeployDev
        steps:
          - checkout: self
          - download: current
            artifact: drop

          - task: Bash@3
            displayName: 'Install Terraform'
            inputs:
              targetType: 'inline'
              script: |
                sudo apt-get update
                sudo apt-get install -y wget unzip
                wget https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
                unzip terraform_$(terraformVersion)_linux_amd64.zip
                sudo mv terraform /usr/local/bin/
                terraform -version

          - task: Bash@3
            displayName: 'Terraform Init (Dev)'
            inputs:
              workingDirectory: '$(tfWorkingDir)'
              targetType: 'inline'
              script: |
                terraform init -input=false -reconfigure \
                  -backend-config="resource_group_name=terraform-backend-rg" \
                  -backend-config="storage_account_name=tfstatefaruk1234567" \
                  -backend-config="container_name=tfstate" \
                  -backend-config="key=$(environment_dev).terraform.tfstate"
            env:
              ARM_CLIENT_ID: $(CLIENT_ID)
              ARM_CLIENT_SECRET: $(CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(TENANT_ID)

          - task: Bash@3
            displayName: 'Terraform Plan (Dev)'
            inputs:
              workingDirectory: '$(tfWorkingDir)'
              targetType: 'inline'
              script: |
                # Export Dev-specific variables
                export RESOURCE_GROUP_NAME=$(resource_group_name_dev)
                export APP_SERVICE_NAME=$(app_service_name_dev)
                export APP_SERVICE_PLAN_NAME=$(app_service_plan_name)
                export SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)
                export CLIENT_ID=$(CLIENT_ID)
                export CLIENT_SECRET=$(CLIENT_SECRET)
                export TENANT_ID=$(TENANT_ID)

                # Debug the values of the variables
                echo "Resource Group Name: $RESOURCE_GROUP_NAME"
                echo "App Service Name: $APP_SERVICE_NAME"
                echo "App Service Plan Name: $APP_SERVICE_PLAN_NAME"

                # Run Terraform plan with explicit variables
                terraform plan -out=tfplan \
                  -var="resource_group_name=$RESOURCE_GROUP_NAME" \
                  -var="app_service_name=$APP_SERVICE_NAME" \
                  -var="app_service_plan_name=$APP_SERVICE_PLAN_NAME" \
                  -var="subscription_id=$SUBSCRIPTION_ID" \
                  -var="client_id=$CLIENT_ID" \
                  -var="client_secret=$CLIENT_SECRET" \
                  -var="tenant_id=$TENANT_ID"
            env:
              ARM_CLIENT_ID: $(CLIENT_ID)
              ARM_CLIENT_SECRET: $(CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(TENANT_ID)

          - task: Bash@3
            displayName: 'Terraform Apply (Dev)'
            inputs:
              workingDirectory: '$(tfWorkingDir)'
              targetType: 'inline'
              script: |
                if [ -f tfplan ]; then
                  terraform apply -auto-approve tfplan
                else
                  echo "tfplan not found. Skipping apply."
                  exit 1
                fi
            env:
              ARM_CLIENT_ID: $(CLIENT_ID)
              ARM_CLIENT_SECRET: $(CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(TENANT_ID)

          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App (Dev)'
            inputs:
              azureSubscription: 'terraform-sc'
              appType: 'webAppLinux'
              appName: '$(app_service_name_dev)'
              package: '$(Pipeline.Workspace)/drop/app.zip'
              runtimeStack: 'PYTHON|3.10'
              startUpCommand: 'gunicorn --bind=0.0.0.0 --workers=4 app:app:app'

  - stage: Staging
    displayName: 'Staging Environment Deployment'
    dependsOn: Dev
    condition: succeeded()
    jobs:
      - job: DeployStaging
        steps:
          - checkout: self
          - download: current
            artifact: drop

          - task: Bash@3
            displayName: 'Install Terraform'
            inputs:
              targetType: 'inline'
              script: |
                sudo apt-get update
                sudo apt-get install -y wget unzip
                wget https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
                unzip terraform_$(terraformVersion)_linux_amd64.zip
                sudo mv terraform /usr/local/bin/
                terraform -version

          - task: Bash@3
            displayName: 'Terraform Init (Staging)'
            inputs:
              workingDirectory: '$(tfWorkingDir)'
              targetType: 'inline'
              script: |
                terraform init -input=false -reconfigure \
                  -backend-config="resource_group_name=terraform-backend-rg" \
                  -backend-config="storage_account_name=tfstatefaruk1234567" \
                  -backend-config="container_name=tfstate" \
                  -backend-config="key=$(environment_staging).terraform.tfstate"
            env:
              ARM_CLIENT_ID: $(CLIENT_ID)
              ARM_CLIENT_SECRET: $(CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(TENANT_ID)

          - task: Bash@3
            displayName: 'Terraform Plan (Staging)'
            inputs:
              workingDirectory: '$(tfWorkingDir)'
              targetType: 'inline'
              script: |
                # Export Staging-specific variables
                export RESOURCE_GROUP_NAME=$(resource_group_name_staging)
                export APP_SERVICE_NAME=$(app_service_name_staging)
                export APP_SERVICE_PLAN_NAME=$(app_service_plan_name)
                export SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)
                export CLIENT_ID=$(CLIENT_ID)
                export CLIENT_SECRET=$(CLIENT_SECRET)
                export TENANT_ID=$(TENANT_ID)

                # Debug the values of the variables
                echo "Resource Group Name: $RESOURCE_GROUP_NAME"
                echo "App Service Name: $APP_SERVICE_NAME"
                echo "App Service Plan Name: $APP_SERVICE_PLAN_NAME"

                # Run Terraform plan with explicit variables
                terraform plan -out=tfplan \
                  -var="resource_group_name=$RESOURCE_GROUP_NAME" \
                  -var="app_service_name=$APP_SERVICE_NAME" \
                  -var="app_service_plan_name=$APP_SERVICE_PLAN_NAME" \
                  -var="subscription_id=$SUBSCRIPTION_ID" \
                  -var="client_id=$CLIENT_ID" \
                  -var="client_secret=$CLIENT_SECRET" \
                  -var="tenant_id=$TENANT_ID"
            env:
              ARM_CLIENT_ID: $(CLIENT_ID)
              ARM_CLIENT_SECRET: $(CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(TENANT_ID)

          - task: Bash@3
            displayName: 'Terraform Apply (Staging)'
            inputs:
              workingDirectory: '$(tfWorkingDir)'
              targetType: 'inline'
              script: |
                if [ -f tfplan ]; then
                  terraform apply -auto-approve tfplan
                else
                  echo "tfplan not found. Skipping apply."
                  exit 1
                fi
            env:
              ARM_CLIENT_ID: $(CLIENT_ID)
              ARM_CLIENT_SECRET: $(CLIENT_SECRET)
              ARM_SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
              ARM_TENANT_ID: $(TENANT_ID)

          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App (Staging)'
            inputs:
              azureSubscription: 'terraform-sc'
              appType: 'webAppLinux'
              appName: '$(app_service_name_staging)'
              package: '$(Pipeline.Workspace)/drop/app.zip'
              runtimeStack: 'PYTHON|3.10'
              startUpCommand: 'gunicorn --bind=0.0.0.0 --workers=4 app:app:app'


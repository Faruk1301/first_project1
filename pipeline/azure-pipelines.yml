trigger:
  branches:
    include:
      - main

variables:
  - group: terraform_credential  # Your variable group
  - name: pythonVersion
    value: '3.10'

stages:
  # 1. BUILD STAGE
  - stage: Build
    displayName: 'Build Application'
    jobs:
      - job: build
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
              addToPath: true

          - script: |
              pip install -r app/requirements.txt
              echo "gunicorn --bind=0.0.0.0:5000 --timeout 600 app:app" > app/startup.sh
              chmod +x app/startup.sh
            displayName: 'Prepare app'
            workingDirectory: '$(Build.SourcesDirectory)/app'

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: 'app'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'

          - publish: '$(Build.ArtifactStagingDirectory)/app.zip'
            artifact: 'webapp'

  # 2. DEV STAGE  
  - stage: Dev
    displayName: 'Deploy to Dev'
    dependsOn: Build
    jobs:
      - job: deploy
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - download: current
            artifact: 'webapp'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'terraform-sc'  # Your service connection
              appType: 'webAppLinux'
              appName: 'webapp-faruk-dev'  # Fixed name
              package: '$(Pipeline.Workspace)/webapp/app.zip'
              runtimeStack: 'PYTHON|$(pythonVersion)'
              startupCommand: 'bash startup.sh'

  # 3. STAGING STAGE
  - stage: Staging
    displayName: 'Deploy to Staging'
    dependsOn: Dev
    condition: succeeded()
    jobs:
      - job: deploy
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - download: current
            artifact: 'webapp'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'terraform-sc'  # Your service connection
              appType: 'webAppLinux'
              appName: 'webapp-faruk-staging'  # Fixed name
              package: '$(Pipeline.Workspace)/webapp/app.zip'
              runtimeStack: 'PYTHON|$(pythonVersion)'
              startupCommand: 'bash startup.sh'

# ... (everything before this is unchanged)

  - stage: Dev
    displayName: 'Dev Environment Deployment'
    dependsOn: Build
    jobs:
      - job: DeployDev
        steps:
          - checkout: self
          - download: current
            artifact: drop

          - task: Bash@3
            displayName: 'Install Terraform'
            inputs:
              targetType: 'inline'
              script: |
                sudo apt-get update
                sudo apt-get install -y wget unzip
                wget https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
                unzip terraform_$(terraformVersion)_linux_amd64.zip
                sudo mv terraform /usr/local/bin/
                terraform -version

          - task: Bash@3
            displayName: 'Initialize and Import Resources'
            inputs:
              workingDirectory: '$(tfWorkingDir)'
              targetType: 'inline'
              script: |
                terraform init -input=false
                terraform import \
                  -var="app_service_name=$(app_service_name_dev)" \
                  -var="resource_group_name=$(resource_group_name_dev)" \
                  -var="environment=$(environment_dev)" \
                  azurerm_resource_group.rg /subscriptions/$(SUBSCRIPTION_ID)/resourceGroups/$(resource_group_name_dev) || true
                terraform plan \
                  -var="app_service_name=$(app_service_name_dev)" \
                  -var="resource_group_name=$(resource_group_name_dev)" \
                  -var="environment=$(environment_dev)"

# ... (Apply & Deploy Dev remains unchanged)

  - stage: Staging
    displayName: 'Staging Environment Deployment'
    dependsOn: Dev
    condition: succeeded()
    jobs:
      - job: DeployStaging
        steps:
          - checkout: self
          - download: current
            artifact: drop

          - task: Bash@3
            displayName: 'Initialize and Import Resources'
            inputs:
              workingDirectory: '$(tfWorkingDir)'
              targetType: 'inline'
              script: |
                terraform init -input=false
                terraform import \
                  -var="app_service_name=$(app_service_name_staging)" \
                  -var="resource_group_name=$(resource_group_name_staging)" \
                  -var="environment=$(environment_staging)" \
                  azurerm_resource_group.rg /subscriptions/$(SUBSCRIPTION_ID)/resourceGroups/$(resource_group_name_staging) || true
                terraform plan \
                  -var="app_service_name=$(app_service_name_staging)" \
                  -var="resource_group_name=$(resource_group_name_staging)" \
                  -var="environment=$(environment_staging)"

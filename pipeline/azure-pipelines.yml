
trigger:
  paths:
    include:
      - app/*
      - infra/*
      - pipeline/azure-pipelines.yml

variables:
  - group: terraform_credential
  - name: pythonVersion
    value: '3.10'
  - name: tfWorkingDir
    value: 'infra'
  - name: terraformVersion
    value: '1.5.7'
  - name: environment.dev
    value: 'dev'
  - name: environment.staging
    value: 'staging'

pool:
  vmImage: 'ubuntu-24.04'  # Use 'ubuntu-22.04' if issues with Terraform persist

stages:
  - stage: Build
    displayName: 'Build Stage'
    jobs:
      - job: BuildJob
        steps:
          - checkout: self
          
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
              addToPath: true
              architecture: 'x64'

          - script: |
              cd app
              python -m venv venv
              source venv/bin/activate
              pip install --upgrade pip
              pip install -r requirements.txt
            displayName: 'Install Python Dependencies'

          - task: ArchiveFiles@2
            displayName: 'Package Application'
            inputs:
              rootFolderOrFile: 'app'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'
              replaceExistingArchive: true
              excludeFiles: |
                **/infra/**
                **/__pycache__/**

          - publish: $(Build.ArtifactStagingDirectory)/app.zip
            artifact: drop

  - stage: Dev
    displayName: 'Dev Environment Deployment'
    dependsOn: Build
    jobs:
      - job: DeployDev
        steps:
          - checkout: self
          - download: current
            artifact: drop

          - task: Bash@3
            displayName: 'Install Terraform'
            inputs:
              targetType: 'inline'
              script: |
                sudo apt-get update
                sudo apt-get install -y wget unzip
                wget https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
                unzip terraform_$(terraformVersion)_linux_amd64.zip
                sudo mv terraform /usr/local/bin/
                terraform -version

          - script: |
              cd $(tfWorkingDir)
              terraform init -input=false
              terraform validate
              terraform apply -auto-approve \
                -var="app_service_name=$(app_service_name)" \
                -var="environment=$(environment.dev)"
            displayName: 'Deploy Infrastructure (Dev)'
            env:
              SUBSCRIPTION_ID: $(SUBSCRIPTION_ID)
              CLIENT_ID: $(CLIENT_ID)
              CLIENT_SECRET: $(CLIENT_SECRET)
              TENANT_ID: $(TENANT_ID)

          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App (Dev)'
            inputs:
              azureSubscription: 'terraform-sc'
              appType: 'webAppLinux'
              appName: '$(app_service_name)'
              package: '$(Pipeline.Workspace)/drop/app.zip'
              runtimeStack: 'PYTHON|3.10'
              startUpCommand: 'gunicorn --bind=0.0.0.0 --workers=4 app:app'

  - stage: Staging
    displayName: 'Staging Environment Deployment'
    dependsOn: Dev
    condition: succeeded()
    jobs:
      - job: DeployStaging
        steps:
          - checkout: self
          - download: current
            artifact: drop

          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App (Staging)'
            inputs:
              azureSubscription: 'terraform-sc'
              appType: 'webAppLinux'
              appName: 'webapp-faruk-staging-001'
              package: '$(Pipeline.Workspace)/drop/app.zip'
              runtimeStack: 'PYTHON|3.10'
              startUpCommand: 'gunicorn --bind=0.0.0.0 --workers=4 app:app'

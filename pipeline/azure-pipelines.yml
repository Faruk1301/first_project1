trigger:
  branches:
    include:
      - main

variables:
  - group: terraform_credential
  - name: terraformDirectory
    value: '$(Build.SourcesDirectory)/app'  # main.tf location
  - name: appDirectory
    value: '$(Build.SourcesDirectory)/app'  # app.py location
  - name: pythonVersion
    value: '3.10'
  - name: devWebAppName
    value: 'webapp-faruk-dev-001'
  - name: stagingWebAppName
    value: 'webapp-faruk-staging-001'
  - name: devResourceGroup
    value: 'webapp-rg-dev'
  - name: stagingResourceGroup
    value: 'webapp-rg-staging'

stages:
  - stage: Build
    displayName: 'Build Application'
    jobs:
      - job: build
        displayName: 'Build Package'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
              addToPath: true

          - script: |
              pip install -r $(appDirectory)/requirements.txt
              echo "gunicorn --bind=0.0.0.0:5000 --timeout 600 app:app" > $(appDirectory)/startup.sh
              chmod +x $(appDirectory)/startup.sh
            displayName: 'Prepare Application'
            workingDirectory: $(appDirectory)

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: $(appDirectory)
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'
              replaceExistingArchive: true

          - publish: '$(Build.ArtifactStagingDirectory)/app.zip'
            artifact: 'webapp-package'

  - stage: Dev
    displayName: 'Dev Deployment'
    dependsOn: Build
    jobs:
      - job: terraform_dev
        displayName: 'Provision Dev'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: '1.5.5'

          - script: |
              terraform init -input=false
              terraform workspace new dev || true
              terraform workspace select dev
              terraform plan -out=tfplan -var="resource_group_name=$(devResourceGroup)" -var="app_service_name=$(devWebAppName)"
              terraform apply -auto-approve tfplan
            displayName: 'Terraform Dev'
            workingDirectory: $(terraformDirectory)

      - job: deploy_dev
        displayName: 'Deploy to Dev'
        dependsOn: terraform_dev
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - download: current
            artifact: 'webapp-package'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'terraform-sc'
              appType: 'webAppLinux'
              appName: '$(devWebAppName)'
              package: '$(Pipeline.Workspace)/webapp-package/app.zip'
              runtimeStack: 'PYTHON|$(pythonVersion)'
              startupCommand: 'bash startup.sh'

  - stage: Staging
    displayName: 'Staging Deployment'
    dependsOn: Dev
    condition: succeeded()
    jobs:
      - job: terraform_staging
        displayName: 'Provision Staging'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: '1.5.5'

          - script: |
              terraform init -input=false
              terraform workspace new staging || true
              terraform workspace select staging
              terraform plan -out=tfplan -var="resource_group_name=$(stagingResourceGroup)" -var="app_service_name=$(stagingWebAppName)"
              terraform apply -auto-approve tfplan
            displayName: 'Terraform Staging'
            workingDirectory: $(terraformDirectory)

      - job: deploy_staging
        displayName: 'Deploy to Staging'
        dependsOn: terraform_staging
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - download: current
            artifact: 'webapp-package'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'terraform-sc'
              appType: 'webAppLinux'
              appName: '$(stagingWebAppName)'
              package: '$(Pipeline.Workspace)/webapp-package/app.zip'
              runtimeStack: 'PYTHON|$(pythonVersion)'
              startupCommand: 'bash startup.sh'
trigger:
  paths:
    include:
      - app/*
      - infra/*
      - pipeline/azure-pipelines.yml

variables:
  - group: terraform_credential
  - name: pythonVersion
    value: '3.10'
  - name: tfWorkingDir
    value: 'infra'
  - name: terraformVersion
    value: '1.5.7'
  - name: location
    value: 'East US'

  # Environment configurations
  - name: dev.app_service_name
    value: 'demo-app-faruk-dev-001'
  - name: dev.resource_group_name
    value: 'my-resource-group-dev'
  
  - name: staging.app_service_name
    value: 'webapp-faruk-staging-001'
  - name: staging.resource_group_name
    value: 'my-resource-group-staging'

  # Common
  - name: app_service_plan_name
    value: 'my-app-service-plan'

pool:
  vmImage: 'ubuntu-24.04'

stages:
  - stage: Build
    displayName: 'Build Stage'
    jobs:
      - job: BuildJob
        displayName: 'Build and Package App'
        steps:
          - checkout: self

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'

          - script: |
              cd app
              python -m venv venv
              source venv/bin/activate
              pip install -r requirements.txt
            displayName: 'Install Dependencies'

          - task: ArchiveFiles@2
            displayName: 'Archive Application'
            inputs:
              rootFolderOrFile: 'app'
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'
              replaceExistingArchive: true

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Artifact'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/app.zip'
              artifact: 'drop'

  - stage: TerraformDev
    displayName: 'Terraform Dev'
    dependsOn: Build
    jobs:
      - job: Terraform
        displayName: 'Provision Dev Infrastructure'
        steps:
          - checkout: self

          - task: AzureCLI@2
            displayName: 'Terraform Init, Plan, and Apply (Dev)'
            inputs:
              azureSubscription: 'terraform-sc'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e
                curl -sLo terraform.zip https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
                unzip terraform.zip
                sudo mv terraform /usr/local/bin/
                terraform -version
                cd $(tfWorkingDir)
                export ARM_CLIENT_ID=$(CLIENT_ID)
                export ARM_CLIENT_SECRET=$(CLIENT_SECRET)
                export ARM_SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)
                export ARM_TENANT_ID=$(TENANT_ID)
                terraform init -backend-config="resource_group_name=terraform-backend-rg" \
                               -backend-config="storage_account_name=tfstatefaruk1234567" \
                               -backend-config="container_name=tfstate" \
                               -backend-config="key=dev.terraform.tfstate"
                terraform workspace select dev || terraform workspace new dev
                terraform plan -out=tfplan \
                  -var="resource_group_name=$(dev.resource_group_name)" \
                  -var="app_service_name=$(dev.app_service_name)" \
                  -var="app_service_plan_name=$(app_service_plan_name)" \
                  -var="location=$(location)"
                terraform apply tfplan

  - stage: DeployDev
    displayName: 'Deploy to Dev'
    dependsOn: TerraformDev
    jobs:
      - job: Deploy
        displayName: 'Deploy App to Dev'
        steps:
          - download: current
            artifact: drop

          - task: AzureWebApp@1
            displayName: 'Deploy to Web App (Dev)'
            inputs:
              azureSubscription: 'terraform-sc'
              appType: 'webAppLinux'
              appName: '$(dev.app_service_name)'
              package: '$(Pipeline.Workspace)/drop/app.zip'
              runtimeStack: 'PYTHON|3.10'
              startUpCommand: 'gunicorn --bind=0.0.0.0 --workers=4 app:app:app'

  - stage: TerraformStaging
    displayName: 'Terraform Staging'
    dependsOn: DeployDev
    condition: succeeded()
    jobs:
      - job: Terraform
        displayName: 'Provision Staging Infrastructure'
        steps:
          - checkout: self

          - task: AzureCLI@2
            displayName: 'Terraform Init, Plan, and Apply (Staging)'
            inputs:
              azureSubscription: 'terraform-sc'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                set -e
                curl -sLo terraform.zip https://releases.hashicorp.com/terraform/$(terraformVersion)/terraform_$(terraformVersion)_linux_amd64.zip
                unzip terraform.zip
                sudo mv terraform /usr/local/bin/
                terraform -version
                cd $(tfWorkingDir)
                export ARM_CLIENT_ID=$(CLIENT_ID)
                export ARM_CLIENT_SECRET=$(CLIENT_SECRET)
                export ARM_SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)
                export ARM_TENANT_ID=$(TENANT_ID)
                terraform init -backend-config="resource_group_name=terraform-backend-rg" \
                               -backend-config="storage_account_name=tfstatefaruk1234567" \
                               -backend-config="container_name=tfstate" \
                               -backend-config="key=staging.terraform.tfstate"
                terraform workspace select staging || terraform workspace new staging
                terraform plan -out=tfplan \
                  -var="resource_group_name=$(staging.resource_group_name)" \
                  -var="app_service_name=$(staging.app_service_name)" \
                  -var="app_service_plan_name=$(app_service_plan_name)" \
                  -var="location=$(location)"
                terraform apply tfplan

  - stage: DeployStaging
    displayName: 'Deploy to Staging'
    dependsOn: TerraformStaging
    condition: succeeded()
    jobs:
      - job: Deploy
        displayName: 'Deploy App to Staging'
        steps:
          - download: current
            artifact: drop

          - task: AzureWebApp@1
            displayName: 'Deploy to Web App (Staging)'
            inputs:
              azureSubscription: 'terraform-sc'
              appType: 'webAppLinux'
              appName: '$(staging.app_service_name)'
              package: '$(Pipeline.Workspace)/drop/app.zip'
              runtimeStack: 'PYTHON|3.10'
              startUpCommand: 'gunicorn --bind=0.0.0.0 --workers=4 app:app:app'



trigger:
  paths:
    include:
      - app/*
      - infra/*
      - pipeline/azure-pipelines.yml

pool:
  vmImage: ubuntu-latest

variables:
  backendResourceGroup: 'terraform-backend-rg'
  backendStorageAccount: 'tfstatefaruk1234567'
  backendContainer: 'tfstate'
  backendKey: 'dev.terraform.tfstate'  # Initially set to dev, will change for staging

stages:
- stage: Build
  jobs:
  - job: TerraformInstallation
    displayName: "Install Terraform"
    steps:
    - task: TerraformInstaller@1
      displayName: Install Terraform
      inputs:
        terraformVersion: 'latest'

- stage: Dev
  dependsOn: Build
  jobs:
  - job: DeployDev
    displayName: "Deploy Development WebApp"
    steps:
    - task: TerraformCLI@1   # Updated version
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendType: 'azurerm'
        backendServiceArm: 'terraform-sc'
        backendAzureRmResourceGroupName: '$(backendResourceGroup)'
        backendAzureRmStorageAccountName: '$(backendStorageAccount)'
        backendAzureRmContainerName: '$(backendContainer)'
        backendAzureRmKey: '$(backendKey)'   # Dev state file (dev.terraform.tfstate)
        allowTelemetryCollection: false
        additionalArgs: '-reconfigure'
        workingDirectory: infra

    - script: |
        terraform workspace select dev || terraform workspace new dev
      displayName: 'Select/Create Dev Workspace'

    - task: TerraformCLI@1   # Updated version
      displayName: Terraform Plan (Dev)
      inputs:
        provider: 'azurerm'
        command: 'plan'
        environmentServiceName: 'terraform-sc'
        workingDirectory: infra

    - task: TerraformCLI@1   # Updated version
      displayName: Terraform Apply (Dev)
      inputs:
        provider: 'azurerm'
        command: 'apply'
        environmentServiceName: 'terraform-sc'
        additionalArgs: '-auto-approve'
        workingDirectory: infra

    - script: |
        # Capture the web app URL from Terraform output and set it as a pipeline variable
        echo "##vso[task.setvariable variable=webAppUrl]$(terraform output -raw web_app_url)"
      displayName: 'Capture WebApp URL'

    - script: |
        # Display the web app URL
        echo "Web App URL: $(webAppUrl)"
      displayName: 'Display WebApp URL'

- stage: Staging
  dependsOn: Dev
  jobs:
  - job: DeployStaging
    displayName: "Deploy Staging WebApp"
    steps:
    - task: TerraformCLI@1   # Updated version
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendType: 'azurerm'
        backendServiceArm: 'terraform-sc'
        backendAzureRmResourceGroupName: '$(backendResourceGroup)'
        backendAzureRmStorageAccountName: '$(backendStorageAccount)'
        backendAzureRmContainerName: '$(backendContainer)'
        backendAzureRmKey: 'staging.terraform.tfstate'  # Staging state file (staging.terraform.tfstate)
        allowTelemetryCollection: false
        additionalArgs: '-reconfigure'
        workingDirectory: infra

    - script: |
        terraform workspace select staging || terraform workspace new staging
      displayName: 'Select/Create Staging Workspace'

    - task: TerraformCLI@1   # Updated version
      displayName: Terraform Plan (Staging)
      inputs:
        provider: 'azurerm'
        command: 'plan'
        environmentServiceName: 'terraform-sc'
        workingDirectory: infra

    - task: TerraformCLI@1   # Updated version
      displayName: Terraform Apply (Staging)
      inputs:
        provider: 'azurerm'
        command: 'apply'
        environmentServiceName: 'terraform-sc'
        additionalArgs: '-auto-approve'
        workingDirectory: infra

